{
  "Tan2021/prepare": [
    {
      "source": "import os\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nimport schicluster\nPACKAGE_DIR = schicluster.__path__[0]\n",
      "names": [
        {
          "import_components": [
            "schicluster"
          ],
          "code_str": "schicluster",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "schicluster"
        }
      ],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "prepare-pseudobulk-analyses",
        "headings": [
          "Prepare pseudobulk analyses"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "metadata = pd.read_csv('Tan2021_dipc_cluster.csv.gz', header=0, index_col=0)\nmetadata['rnatype'] = [xx.replace(' ', '_').replace('/', '').replace(',', '').replace('.', '') for xx in metadata['rnatype'].values]\nmetadata\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "prepare-pseudobulk-analyses",
        "headings": [
          "Prepare pseudobulk analyses"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "def prepare_dir(output_dir, chunk_df, template, params):\n\n    os.makedirs(output_dir, exist_ok=True)\n    cell_table_path = f'{output_dir}cell_table.csv'\n    chunk_df.to_csv(cell_table_path, header=False, index=True)\n    params_str = '\\n'.join(f'{k} = {v}' for k, v in params.items())\n\n    with open(f'{output_dir}Snakefile_master', 'w') as f:\n        f.write(params_str + template)\n    return\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "prepare-pseudobulk-analyses",
        "headings": [
          "Prepare pseudobulk analyses"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "cell_table = pd.read_csv('contact_table.tsv', sep='\\t', header=None, index_col=0, names=['cell_id','csv_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "raw",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "cell_table['cluster'] = metadata['rnatype'].copy()\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "raw",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "leg = {}\nchunk_size = 200\noutdir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/merged_raw/'\nfor cluster, sub_df in cell_table.groupby('cluster'):\n    legtmp = []\n    # group = cluster.replace(' ', '_').replace('/', '').replace(',', '').replace('.', '')\n    os.makedirs(f'{outdir}{cluster}', exist_ok=True)\n    if sub_df.shape[0]>1500:\n        tmp = sub_df.loc[np.random.choice(sub_df.index, 1500, False)]\n    else:\n        tmp = sub_df.copy()\n    for i,chunk_start in enumerate(np.arange(0, tmp.shape[0], chunk_size)):\n        os.makedirs(f'{outdir}{cluster}_chunk{i}', exist_ok=True)\n        tmp['csv_path'].iloc[chunk_start:(chunk_start+chunk_size)].to_csv(f'{outdir}{cluster}_chunk{i}/cell_table.tsv', sep='\\t', header=False, index=True)\n        legtmp.append(f'{cluster}_chunk{i}')\n    tmp['csv_path'].to_csv(f'{outdir}{cluster}/cell_table.tsv', sep='\\t', header=False, index=True)\n    leg[cluster] = legtmp\n    print(cluster, tmp.shape[0])\n    ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "raw",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "f1 = open(f'{outdir}snakemake_cmd_step1.txt', 'w')\nf2 = open(f'{outdir}snakemake_cmd_step2.txt', 'w')\nfor ct in leg:\n    for group in leg[ct]:\n        cmd = f'hicluster merge-cell-raw --cell_table {outdir}{group}/cell_table.tsv --chrom_size_path /data/ref/mm10/genome/mm10.main.chrom.sizes --output_file {outdir}{group}/raw.cool --chr1 1 --pos1 2 --chr2 3 --pos2 4'\n        f1.write(cmd + '\\n')\n    if len(leg[ct])<2:\n        group = leg[ct][0]\n        cmd = f'rsync -arv {outdir}{group}/raw.cool {outdir}{ct}/{ct}.raw.cool'\n        f2.write(cmd + '\\n')\n    else:\n        cmd = f'cooler merge {outdir}{ct}/{ct}.raw.cool'\n        for group in leg[ct]:\n            cmd += f' {outdir}{group}/raw.cool'\n        f2.write(cmd + '\\n')\n        \nf1.close()\nf2.close()\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "note",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "from gliderport.preset import notebook_snakemake\n\nnotebook_snakemake(\n    work_dir=f\"merged_raw/\",\n    notebook_dir=\"merged_raw/template_step1/\",\n    groups=np.concatenate([leg[xx] for xx in leg]).tolist(),\n    default_cpu=1,\n    default_mem_gb=5,\n    redo_prepare=True,\n)\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "!snakemake --snakefile Snakefile -j 8 --keep-going",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "notebook_snakemake(\n    work_dir=f\"merged_raw/\",\n    notebook_dir=\"merged_raw/template_step2/\",\n    groups=list(leg.keys()),\n    default_cpu=1,\n    default_mem_gb=5,\n    redo_prepare=True,\n)\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "!snakemake --snakefile Snakefile -j 8 --keep-going",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "coollist = glob('/data/test_schicluster/Tan2021/scool/impute/10K/*/*.cool')\ncell_table = pd.DataFrame(coollist, index=[xx.split('/')[-1].replace('.cool', '') for xx in coollist], columns=['cool_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table['cluster'] = metadata['rnatype'].copy()\ncell_table['cool_path'] = cell_table['cool_path'].str.replace('/data/test_schicluster', '/anvil/scratch/x-zhou')\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "outdir = 'Tan2021_loop/'\nloop_dir = f'/anvil/scratch/x-zhou/{outdir}'\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "params = {\n    'cpu': 96,\n    'resolution': 10000,\n    'chrom_size_path': f'\"{loop_dir}mm10.main20.chrom.sizes\"',\n    'black_list_path': f'\"{loop_dir}mm10.dipc.rowsum1000.blf50.merged.bed\"',\n}",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "with open(f'{PACKAGE_DIR}/loop/snakemake_template_loop.txt') as tmp:\n    GENERATE_MATRIX_CHUNK_TEMPLATE = tmp.read()\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "for cluster, sub_df in cell_table.groupby('cluster'):\n    if sub_df.shape[0]>1500:\n        tmp = sub_df.loc[np.random.choice(sub_df.index, 1500, False)]\n    else:\n        tmp = sub_df.copy()\n    prepare_dir(f'{outdir}{cluster}/', tmp, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n    ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "with open(f'{outdir}snakemake_cmds.txt', 'w') as f:\n    for cluster, sub_df in cell_table.groupby('cluster'):\n        cluster_dir = f'{loop_dir}{cluster}'\n        f.write(f'snakemake -d {cluster_dir} -s {cluster_dir}/Snakefile_master -j {params[\"cpu\"]}\\n')\n        ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "!cp /data/ref/mm10/genome/mm10.main20.chrom.sizes Tan2021_loop/\n!cp /home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/mm10.dipc.rowsum1000.blf50.merged.bed Tan2021_loop/\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "coollist = glob('/data/test_schicluster/Tan2021/scool/impute/25K/*/*.cool')\ncell_table = pd.DataFrame(coollist, index=[xx.split('/')[-1].replace('.cool', '') for xx in coollist], columns=['cool_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table['cluster'] = metadata['rnatype'].copy()\n# cell_table['cool_path'] = cell_table['cool_path'].str.replace('/data/test_schicluster', '/anvil/scratch/x-zhou')\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "outdir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/domain/'\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "for cluster, sub_df in cell_table.groupby('cluster'):\n    os.makedirs(f'{outdir}{cluster}', exist_ok=True)\n    sub_df.to_csv(f'{outdir}{cluster}/cell_table.csv', header=False, index=True)\n    #with open(f'{cluster}/Snakefile_master', 'w') as f:\n    #    f.write(snakemake_str)\n    print(cluster, sub_df.shape[0])\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "params = {\n    'resolution': 25000,\n    'chrom_size_path': '\"/data/ref/mm10/genome/mm10.main20.chrom.sizes\"',\n}\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "chunk_size = 200\nres = 25000\ntotal_chunk_dirs = []\ngroup_chunks = {}\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_chunk_template') as tmp:\n    GENERATE_MATRIX_CHUNK_TEMPLATE = tmp.read()\n\nfor group, group_df in cell_table.groupby('cluster'):\n    group_chunks[group] = []\n    if group_df.shape[0] <= chunk_size:\n        this_dir = f'{outdir}{group}_chunk0/'\n        params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n        prepare_dir(this_dir, group_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n        total_chunk_dirs.append(this_dir)\n        group_chunks[group].append(this_dir)\n    else:\n        group_df['chunk'] = [i // chunk_size for i in range(group_df.shape[0])]\n        for chunk, chunk_df in group_df.groupby('chunk'):\n            this_dir = f'{outdir}{group}_chunk{chunk}/'\n            params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n            prepare_dir(this_dir, chunk_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n            total_chunk_dirs.append(this_dir)\n            group_chunks[group].append(this_dir)\n\n            ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "with open(f'{outdir}snakemake_cmd_step1.txt', 'w') as f:\n    for chunk_dir in total_chunk_dirs:\n        cmd = f'snakemake -d {chunk_dir} --snakefile {chunk_dir}Snakefile_master -j 5 --rerun-incomplete'\n        f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "params.pop('cell_table_path')\nparams_str = '\\n'.join(f'{k} = {v}' for k, v in params.items())\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_group_template') as tmp:\n    GENERATE_MATRIX_GROUP_TEMPLATE = tmp.read()\n\nwith open(f'{outdir}Snakefile', 'w') as f:\n    f.write(params_str + '\\n' + GENERATE_MATRIX_GROUP_TEMPLATE)\n    \nwith open(f'{outdir}snakemake_cmd_step2.txt', 'w') as f:\n    cmd = f'snakemake -d {outdir} --snakefile {outdir}Snakefile -j 10 --rerun-incomplete'\n    f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "coollist = glob('/data/test_schicluster/Tan2021/scool/impute/100K/*/*.cool')\ncell_table = pd.DataFrame(coollist, index=[xx.split('/')[-1].replace('.cool', '') for xx in coollist], columns=['cool_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table['cluster'] = metadata['rnatype'].copy()\n# cell_table['cool_path'] = cell_table['cool_path'].str.replace('/data/test_schicluster', '/anvil/scratch/x-zhou')\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "outdir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/compartment/'\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "for cluster, sub_df in cell_table.groupby('cluster'):\n    os.makedirs(f'{outdir}{cluster}', exist_ok=True)\n    sub_df.to_csv(f'{outdir}{cluster}/cell_table.csv', header=False, index=True)\n    print(cluster, sub_df.shape[0])\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "params = {\n    'resolution': 100000,\n    'chrom_size_path': '\"/data/ref/mm10/genome/mm10.main20.chrom.sizes\"',\n}\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "chunk_size = 200\ntotal_chunk_dirs = []\ngroup_chunks = {}\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_chunk_template') as tmp:\n    GENERATE_MATRIX_CHUNK_TEMPLATE = tmp.read()\n\nfor group, group_df in cell_table.groupby('cluster'):\n    group_chunks[group] = []\n    if group_df.shape[0] <= chunk_size:\n        this_dir = f'{outdir}{group}_chunk0/'\n        params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n        prepare_dir(this_dir, group_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n        total_chunk_dirs.append(this_dir)\n        group_chunks[group].append(this_dir)\n    else:\n        group_df['chunk'] = [i // chunk_size for i in range(group_df.shape[0])]\n        for chunk, chunk_df in group_df.groupby('chunk'):\n            this_dir = f'{outdir}{group}_chunk{chunk}/'\n            params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n            prepare_dir(this_dir, chunk_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n            total_chunk_dirs.append(this_dir)\n            group_chunks[group].append(this_dir)\n\n            ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "with open(f'{outdir}snakemake_cmd_step1.txt', 'w') as f:\n    for chunk_dir in total_chunk_dirs:\n        cmd = f'snakemake -d {chunk_dir} --snakefile {chunk_dir}Snakefile_master -j 5 --rerun-incomplete'\n        f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "params.pop('cell_table_path')\nparams_str = '\\n'.join(f'{k} = {v}' for k, v in params.items())\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_group_template') as tmp:\n    GENERATE_MATRIX_GROUP_TEMPLATE = tmp.read()\n\nwith open(f'{outdir}Snakefile', 'w') as f:\n    f.write(params_str + '\\n' + GENERATE_MATRIX_GROUP_TEMPLATE)\n    \nwith open(f'{outdir}snakemake_cmd_step2.txt', 'w') as f:\n    cmd = f'snakemake -d {outdir} --snakefile {outdir}Snakefile -j 10 --rerun-incomplete'\n    f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 440002
    }
  ],
  "api/comp_concatcell_chr/index": [],
  "api/comp_cpg_cell/index": [],
  "api/domain_concatcell_chr/index": [],
  "api/domain_insulation_cell/index": [],
  "api/embed_concatcell_chr/index": [],
  "api/embed_mergechr/index": [],
  "api/gene_score/index": [],
  "api/generatematrix_cell/index": [],
  "api/impute_cell/index": [],
  "api/loop_bkg_cell/index": [],
  "api/loop_mergechr/index": [],
  "api/loop_sumcell_chr/index": [],
  "api/schicluster/__main__/index": [
    {
      "source": "\"\"\"\nscHiCluster is a toolkit for single-cell HiC data preprocessing, imputation, and clustering analysis.\n\nCurrent Tool List in scHiCluster:\n\n\"\"\"",
      "names": [],
      "example": {
        "document": "api/schicluster/__main__/index",
        "ref_id": "module-contents",
        "headings": [
          "schicluster.__main__",
          "Module Contents"
        ]
      },
      "doc_lineno": 30
    }
  ],
  "api/schicluster/_hicluster_internal/index": [
    {
      "source": "\"\"\"\nhic-internal is used for automation, not intend to be used by end user.\nUse hicluster instead.\n\"\"\"",
      "names": [],
      "example": {
        "document": "api/schicluster/_hicluster_internal/index",
        "ref_id": "module-contents",
        "headings": [
          "schicluster._hicluster_internal",
          "Module Contents"
        ]
      },
      "doc_lineno": 21
    }
  ],
  "api/schicluster/_version/index": [],
  "api/schicluster/compartment/call_compartment/index": [],
  "api/schicluster/compartment/index": [],
  "api/schicluster/cool/contact_distance/index": [],
  "api/schicluster/cool/index": [],
  "api/schicluster/cool/merge/index": [],
  "api/schicluster/cool/remove_blacklist/index": [],
  "api/schicluster/cool/scool/index": [],
  "api/schicluster/cool/utilities/index": [],
  "api/schicluster/dev/concat_cell/index": [],
  "api/schicluster/dev/generate_matrix/index": [],
  "api/schicluster/dev/imputecell/index": [],
  "api/schicluster/dev/index": [],
  "api/schicluster/dev/loop_sc/index": [],
  "api/schicluster/dev/merge_cell/index": [],
  "api/schicluster/diff/domain/index": [],
  "api/schicluster/diff/index": [],
  "api/schicluster/diff/loop/index": [],
  "api/schicluster/domain/call_domain/index": [],
  "api/schicluster/domain/index": [],
  "api/schicluster/embedding/calc_embedding/index": [],
  "api/schicluster/embedding/index": [],
  "api/schicluster/impute/impute_chromosome/index": [],
  "api/schicluster/impute/index": [],
  "api/schicluster/impute/merge_cell_to_group/index": [],
  "api/schicluster/impute/snakemake/index": [],
  "api/schicluster/index": [],
  "api/schicluster/loop/compare_loop/index": [],
  "api/schicluster/loop/index": [],
  "api/schicluster/loop/loop_bkg/index": [],
  "api/schicluster/loop/loop_calling/index": [],
  "api/schicluster/loop/merge_cell_to_group/index": [],
  "api/schicluster/loop/merge_group/index": [],
  "api/schicluster/loop/merge_raw_matrix/index": [],
  "api/schicluster/loop/shuffle_fdr/index": [],
  "api/schicluster/loop/snakemake/index": [],
  "api/schicluster/schicluster/index": [],
  "api/schicluster/zarr/cool_ds/index": [],
  "api/schicluster/zarr/index": [],
  "api/schicluster/zarr/loop_ds/index": [],
  "hba/plot_example": [
    {
      "source": "import os\nimport cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm, zscore\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom matplotlib.colors import LogNorm\n\nfrom itertools import cycle, islice\nimport xarray as xr\nfrom glob import glob\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\nleg['cge'] = ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip']\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'cge'",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 25000",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\nddir = f'/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/diff/{group_name}/'\nldir = f'/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/{group_name}/'\ncdir = f'/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "chrom_size_path = '/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes = chrom_sizes.iloc[:-3]\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "## Load boundary probability\n\nbound_count_ct = pd.read_hdf(f'{indir}MajorType_boundcount.hdf', key='data').loc[leg]\ncell_count_ct = pd.read_csv(f'{indir}MajorType_cellcount.csv.gz', index_col=0, header=0, squeeze=True).loc[leg]\nbound_prob_ct = bound_count_ct / cell_count_ct[:,None]\nbound_prob_ct\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "## Load insulation score\n\nins_count = xr.open_dataset(f'{indir}MajorType_impute.insulation.nc')\nins_count = ins_count.sel({'bin': (ins_count['bin_chrom']!='chrX')})\nins_count['ratio'] = (ins_count.sel({'type':'inter'})['__xarray_dataarray_variable__'] / ins_count.sel({'type':'intra'}))['__xarray_dataarray_variable__']\nins = ins_count['ratio'].to_pandas().loc[leg]\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "genemeta = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/gencode.v33.bed', sep='\\t', header=None, index_col=4)\ngenemeta = genemeta[~genemeta.index.duplicated(keep='first')]\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "gtmp = 'LAMP5'\nlslop, rslop = 1000000, 2000000\n\nchrom = genemeta.loc[gtmp, 0]\nif genemeta.loc[gtmp, 5]=='+':\n    tss = genemeta.loc[gtmp, 1]\n    tes = genemeta.loc[gtmp, 2]\nelse:\n    tss = genemeta.loc[gtmp, 2]\n    tes = genemeta.loc[gtmp, 1]\n\nll, rr = (tss - lslop), (tss + rslop)\nprint(chrom, ll, rr, genemeta.loc[gtmp, 5])\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "## contact maps are plotted at loop resolution\n## select region to plot in Q matrix\n\nresl = 10000\nloopl, loopr = (ll//resl), (rr//resl)\nprint(loopl, loopr)\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "## Load cell type Q\n\nfrom scipy import ndimage as nd\n\ndstall = []\nfor ct in leg:\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.Q.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).tocsr()\n    tmp = Q[loopl:loopr, loopl:loopr].toarray()\n    dstall.append(tmp)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "## select differential loop\n\nloopall = pd.read_hdf(f'{ldir}merged_loop.hdf', key='data')\nsell = ((loopall[0]==chrom) & \n        (zscore(np.log(loopall['Qanova']))>norm.isf(0.15)) & \n        (zscore(np.log(loopall['Tanova']))>norm.isf(0.15)) & \n        (loopall[1]>ll) & (loopall[5]<rr))\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "## select differential boundary\n\nbinall = pd.read_hdf(f'{ddir}MajorType_boundary_stats.hdf', key='data')\nselb = (binall['chrom']==chrom) & (binall['start']>=ll) & (binall['start']<rr) & binall['bklfilter'] & binall['chi2filter'] & binall['ins_lm'] & (binall['probdiff']>0.05) & binall['diff_sc']\nprint(selb.sum())\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "ins.columns = binall.index",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "## select differential compartment\n\nresc = 100000\ncomp = pd.read_csv(f'{cdir}DifferentialResult/fdr_result/differential.intra_sample_combined.pcQnm.bedGraph', sep='\\t', header=0, index_col=None)\ncomp.index = comp['chr'] + '_' + (comp['start'] // resc).astype(str)\nbincomp = comp[['chr', 'start', 'end', 'sample_maha', 'pval', 'padj']]\ncomp = comp[leg]\nselc = (bincomp['chr']==chrom) & (bincomp['start']>=ll) & (bincomp['start']<rr) & (zscore(bincomp['sample_maha'])>norm.isf(0.025))\nprint(selc.sum())\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "fig, axes = plt.subplots(3, len(leg), figsize=(5*len(leg), 7), sharex='col', sharey='row',\n                         gridspec_kw={'height_ratios':[5,1,1]}, dpi=300)\n\n## differential feature position at 10k resolution\ntmpl = loopall.loc[sell, [1,4]].values // resl - loopl\ntmpd = binall.loc[selb, 'start'] // resl - loopl\ntmpc = bincomp.loc[selc, 'start'] // resl - loopl\n\nfor i in range(len(leg)):\n    ax = axes[0,i]\n    ax.axis('equal')\n    ax.set_title(legname[i], fontsize=16)\n    img = ax.imshow(dstall[i], cmap='afmhot_r', vmin=0, vmax=0.012, aspect='auto')\n    ax.set_yticks([])\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    ## plot diff loop\n    ax.scatter(tmpl[:, 0], tmpl[:, 1], alpha=1, s=1, marker='o', edgecolors='none', color='c')\n\n    ax = axes[1,i]\n    ## plot boundary prob, use 10k coordinate\n    sel = (binall['chrom']==chrom) & (binall['start']>=ll) & (binall['start']<rr)\n    ax.plot(binall.loc[sel, 'start'] // resl - loopl, \n            bound_prob_ct.loc[leg[i], sel].values, \n            c='C0', alpha=0.7)\n    ## plot diff boundary\n    ax.scatter(tmpd, np.zeros(len(tmpd))+0.05, color='r', s=4)\n    ax.set_ylim([0, 0.3])\n    ax2 = ax.twinx()\n    ## plot insulation score, use 10k coordinate\n    ax2.plot(binall.loc[sel, 'start'] // resl - loopl, \n             ins.loc[leg[i], sel].values, \n             c='C1', alpha=0.7)\n    ax2.set_ylim([0.05, 0.4])\n    ax.set_xlim([0, loopr-loopl-1])\n    ax.set_xticks(np.arange(0, loopr-loopl+1, 100).tolist() + [tss//resl-loopl, tes//resl-loopl])\n    ax.set_xticklabels([])\n    \n    ax = axes[2,i]\n    sns.despine(bottom=True, ax=ax)\n    ## plot compartment, use 10k coordinate\n    sel = (bincomp['chr']==chrom) & (bincomp['start']>=ll) & (bincomp['start']<rr)\n    x = bincomp.loc[sel, 'start'] // resl - loopl\n    y = comp.loc[sel, leg[i]].values\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ## plot diff comp\n    ax.scatter(tmpc, np.zeros(len(tmpc)), color='r', s=4)\n    ax.set_ylim([-3, 3])\n    ax.set_xlim([-0.5, loopr-loopl-0.5])\n    ax.set_xticks(np.arange(-0.5, loopr-loopl, 100).tolist() + [tss//resl-loopl-0.5, tes//resl-loopl-0.5])\n    ax.set_xticklabels([])\n    ax.set_xticklabels([f'{(xx+loopl)/100}M' for xx in np.arange(0, loopr-loopl+1, 100)]+['TSS','TES'])\n\n# plt.savefig(f'{group_name}_diff_{gtmp}.pdf', transparent=True, dpi=300)\n\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "dstall = []\nfor ct in leg:\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.Q.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).tocsr()\n    tmp = Q[loopl:loopr, loopl:loopr].toarray()\n    dst = nd.rotate(tmp, 45, order=0, reshape=True, prefilter=False, cval=0)\n    dstall.append(dst)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "fig, axes = plt.subplots(len(leg)*2+1, 1, figsize=(10, np.sum([1] + np.tile([3.5,1],len(leg)).tolist())/2), \n                         gridspec_kw={'height_ratios':[1] + np.tile([3.5,1],len(leg)).tolist()}, dpi=300, sharex='all')\n\ntmpl = loopall.loc[sell, [1,4]].values // resl - loopl\ntmpd = binall.loc[selb, 'start'] // resl - loopl\ntmpc = bincomp.loc[selc, 'start'] // resl - loopl\n\nax = axes[0]\nsel = (binall['chrom']==chrom) & (binall['start']>=ll) & (binall['start']<rr)\nxpos = (binall.loc[sel, 'start'] // resl - loopl) * np.sqrt(2)\nax.plot(xpos, binall.loc[sel, 'chi2_sc'].values, \n        c='C0', alpha=0.7)\n\nax.set_title('Chi-Square', fontsize=10)\nax.set_xlim([0, (loopr-loopl-1)*np.sqrt(2)])\n\nfor i in range(len(leg)):\n    ax = axes[i*2+1]\n    ax.set_title(legname[i], fontsize=10)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    img = ax.imshow(dstall[i], cmap='afmhot_r', vmin=0, vmax=0.012)\n    h = len(dstall[i])\n    ax.set_ylim([0.5*h, 0.4*h])\n    ax.set_xlim([0, h])\n    ax.set_yticks([])\n    ax.set_yticklabels([])\n    ax.scatter((tmpl[:, 0]+tmpl[:, 1])/np.sqrt(2), 0.5*h-(tmpl[:, 1]-tmpl[:, 0])/np.sqrt(2), \n           alpha=0.1, s=10, marker='D', edgecolors='c', color='none')\n\n    ax = axes[i*2+2]\n    ax.plot(xpos, bound_prob_ct.loc[leg[i], sel].values, c='C0', alpha=0.7)\n    ax.scatter(tmpd * np.sqrt(2), np.zeros(len(tmpd))+0.05, color='r', s=4)\n    ax.set_ylim([0, 0.3])\n    ax2 = ax.twinx()\n    ax2.plot(xpos, ins.loc[leg[i], sel].values, c='C1', alpha=0.7)\n    ax2.set_ylim([0.05, 0.4])\n    \nax.set_xlim([0, (loopr-loopl-1)*np.sqrt(2)])\nax.set_xticks(np.sqrt(2)*np.array(np.arange(0, loopr-loopl+1, 100).tolist() + [tss//resl-loopl, tes//resl-loopl]))\nax.set_xticklabels([])\nax.set_xticklabels([f'{(xx+loopl)/100}M' for xx in np.arange(0, loopr-loopl+1, 100)]+['TSS','TES'])\n\n# plt.savefig(f'/gale/netapp/entex/HBA/snm3C/plot/majortype_diff_FOXP2.pdf', transparent=True, dpi=300)\n\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 230002
    }
  ]
}